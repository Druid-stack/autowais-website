{
  "name": "ArticShorex AI Agent with Dashboard Integration",
  "nodes": [
    {
      "parameters": {
        "path": "/articshorex-support",
        "options": {}
      },
      "id": "Webhook Trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "articshorex-support-webhook"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "Email Trigger (IMAP)",
      "name": "Email Trigger (IMAP)",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 2,
      "position": [200, 500],
      "credentials": {
        "imap": {
          "id": "articshorex-imap",
          "name": "ArticShorex IMAP"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Dashboard Activity Logger\nconst activityData = {\n  ticketId: $('Merge Input Data').item.json.ticketId,\n  timestamp: new Date().toISOString(),\n  customer: $('Merge Input Data').item.json.customerName,\n  email: $('Merge Input Data').item.json.customerEmail,\n  subject: $('Merge Input Data').item.json.subject,\n  channel: $('Merge Input Data').item.json.channel,\n  priority: $('Merge Input Data').item.json.priority,\n  category: $('Merge Input Data').item.json.category,\n  status: 'processing',\n  aiModel: 'claude-3-opus',\n  responseTime: null,\n  confidence: null,\n  sentiment: null,\n  intent: null,\n  escalationRequired: false,\n  customerVIP: $('Merge Input Data').item.json.customerVIP || false,\n  customerType: $('Merge Input Data').item.json.customerType || 'existing',\n  satisfactionScore: null,\n  metadata: {\n    workflowId: $workflow.id,\n    executionId: $execution.id,\n    nodeId: $node.id,\n    startTime: new Date().toISOString()\n  }\n};\n\nreturn [{ json: activityData }];"
      },
      "id": "Dashboard Logger (Start)",
      "name": "Dashboard Logger (Start)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "merge": "mergeByIndex"
      },
      "id": "Merge Input Data",
      "name": "Merge Input Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [400, 400]
    },
    {
      "parameters": {
        "url": "={{ $env.MONGODB_API_URL }}/customers/query",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MONGODB_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "email",
              "value": "={{ $json.customerEmail }}"
            }
          ]
        }
      },
      "id": "Customer Intelligence",
      "name": "Customer Intelligence",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 400]
    },
    {
      "parameters": {
        "model": "anthropic/claude-3-opus",
        "options": {
          "temperature": 0.3,
          "maxTokens": 1000
        },
        "prompt": "=You are an advanced AI customer service agent for ArticShorex, a premium Arctic expedition company.\n\nCUSTOMER CONTEXT:\n- Name: {{ $('Merge Input Data').item.json.customerName }}\n- Email: {{ $('Merge Input Data').item.json.customerEmail }}\n- VIP Status: {{ $('Customer Intelligence').item.json.vipStatus || 'Standard' }}\n- Previous Bookings: {{ $('Customer Intelligence').item.json.bookingHistory?.length || 0 }}\n- Loyalty Tier: {{ $('Customer Intelligence').item.json.loyaltyTier || 'Bronze' }}\n\nINQUIRY DETAILS:\n- Subject: {{ $('Merge Input Data').item.json.subject }}\n- Channel: {{ $('Merge Input Data').item.json.channel }}\n- Priority: {{ $('Merge Input Data').item.json.priority }}\n- Message: {{ $('Merge Input Data').item.json.message }}\n\nTASKS:\n1. ANALYZE the customer inquiry and provide:\n   - Intent classification (weather-inquiry, booking-modification, tour-information, payment-issue, general-support)\n   - Sentiment analysis (positive, neutral, negative, urgent)\n   - Confidence score (0-1)\n   - Priority level (low, medium, high, urgent)\n\n2. GENERATE a personalized response considering:\n   - Customer's VIP status and loyalty tier\n   - Previous booking history\n   - Arctic expedition expertise\n   - Professional, warm, and helpful tone\n\n3. DETERMINE if escalation is needed\n\n4. PROVIDE response in this JSON format:\n{\n  \"analysis\": {\n    \"intent\": \"intent-category\",\n    \"sentiment\": \"sentiment-level\",\n    \"confidence\": 0.95,\n    \"priority\": \"priority-level\",\n    \"escalationRequired\": false,\n    \"category\": \"support-category\"\n  },\n  \"response\": {\n    \"subject\": \"Re: [Subject]\",\n    \"message\": \"Personalized response message\",\n    \"tone\": \"professional-warm\",\n    \"personalization\": \"VIP/loyalty-specific elements\"\n  },\n  \"actions\": {\n    \"createTicket\": true,\n    \"updateCustomer\": false,\n    \"sendFollowUp\": false,\n    \"escalateToHuman\": false\n  },\n  \"metadata\": {\n    \"processingTime\": \"response-time-ms\",\n    \"aiModel\": \"claude-3-opus\",\n    \"workflowVersion\": \"2.0\"\n  }\n}"
      },
      "id": "AI Agent Processor",
      "name": "AI Agent Processor",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1000, 400],
      "credentials": {
        "openAiApi": {
          "id": "openrouter-api",
          "name": "OpenRouter API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse AI Response and Calculate Metrics\nconst aiResponse = JSON.parse($input.first().json.response);\nconst startTime = new Date($('Dashboard Logger (Start)').item.json.metadata.startTime);\nconst endTime = new Date();\nconst responseTime = (endTime - startTime) / 1000;\n\n// Enhanced response data\nconst processedData = {\n  // Original data\n  ...aiResponse,\n  \n  // Calculated metrics\n  responseTime: responseTime,\n  processingTimestamp: endTime.toISOString(),\n  \n  // Customer context\n  customerData: {\n    name: $('Merge Input Data').item.json.customerName,\n    email: $('Merge Input Data').item.json.customerEmail,\n    vipStatus: $('Customer Intelligence').item.json.vipStatus || 'Standard',\n    loyaltyTier: $('Customer Intelligence').item.json.loyaltyTier || 'Bronze',\n    bookingHistory: $('Customer Intelligence').item.json.bookingHistory || []\n  },\n  \n  // Workflow context\n  workflowContext: {\n    ticketId: $('Merge Input Data').item.json.ticketId,\n    channel: $('Merge Input Data').item.json.channel,\n    priority: $('Merge Input Data').item.json.priority,\n    originalSubject: $('Merge Input Data').item.json.subject,\n    originalMessage: $('Merge Input Data').item.json.message\n  },\n  \n  // Dashboard metrics\n  dashboardMetrics: {\n    aiConfidence: aiResponse.analysis.confidence,\n    sentiment: aiResponse.analysis.sentiment,\n    intent: aiResponse.analysis.intent,\n    escalationRequired: aiResponse.analysis.escalationRequired,\n    responseTimeMs: responseTime * 1000,\n    processingSuccess: true,\n    errorCount: 0\n  }\n};\n\nreturn [{ json: processedData }];"
      },
      "id": "Response Processor",
      "name": "Response Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "url": "={{ $env.MONGODB_API_URL }}/tickets/create",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.MONGODB_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "ticketId",
              "value": "={{ $json.workflowContext.ticketId }}"
            },
            {
              "name": "customerName",
              "value": "={{ $json.customerData.name }}"
            },
            {
              "name": "customerEmail",
              "value": "={{ $json.customerData.email }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.workflowContext.originalSubject }}"
            },
            {
              "name": "message",
              "value": "={{ $json.workflowContext.originalMessage }}"
            },
            {
              "name": "channel",
              "value": "={{ $json.workflowContext.channel }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.workflowContext.priority }}"
            },
            {
              "name": "category",
              "value": "={{ $json.analysis.category }}"
            },
            {
              "name": "status",
              "value": "resolved"
            },
            {
              "name": "aiAnalysis",
              "value": "={{ $json.analysis }}"
            },
            {
              "name": "aiResponse",
              "value": "={{ $json.response }}"
            },
            {
              "name": "customerVIP",
              "value": "={{ $json.customerData.vipStatus === 'VIP' }}"
            },
            {
              "name": "customerType",
              "value": "={{ $json.customerData.bookingHistory.length > 0 ? 'returning' : 'new' }}"
            },
            {
              "name": "escalationRequired",
              "value": "={{ $json.analysis.escalationRequired }}"
            },
            {
              "name": "satisfactionScore",
              "value": "={{ $json.analysis.sentiment === 'positive' ? 5 : $json.analysis.sentiment === 'neutral' ? 3 : 2 }}"
            },
            {
              "name": "metadata",
              "value": "={{ $json.dashboardMetrics }}"
            },
            {
              "name": "createdAt",
              "value": "={{ $json.processingTimestamp }}"
            }
          ]
        }
      },
      "id": "Create Support Ticket",
      "name": "Create Support Ticket",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "fromEmail": "support@articshorex.com",
        "toEmail": "={{ $json.customerData.email }}",
        "subject": "={{ $json.response.subject }}",
        "message": "=Dear {{ $json.customerData.name }},\n\n{{ $json.response.message }}\n\n{{ $json.customerData.vipStatus === 'VIP' ? 'As a valued VIP customer, please don\\'t hesitate to contact us directly for any urgent matters.' : '' }}\n\nBest regards,\nArticShorex AI Support Team\n\n---\nTicket ID: {{ $json.workflowContext.ticketId }}\nResponse Time: {{ $json.responseTime }}s\nConfidence: {{ ($json.analysis.confidence * 100).toFixed(1) }}%",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "Send Email Response",
      "name": "Send Email Response",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1400, 500],
      "credentials": {
        "smtp": {
          "id": "articshorex-smtp",
          "name": "ArticShorex SMTP"
        }
      }
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/webhook/agent-activity",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "ticketId",
              "value": "={{ $json.workflowContext.ticketId }}"
            },
            {
              "name": "customerName",
              "value": "={{ $json.customerData.name }}"
            },
            {
              "name": "customerEmail",
              "value": "={{ $json.customerData.email }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.workflowContext.originalSubject }}"
            },
            {
              "name": "channel",
              "value": "={{ $json.workflowContext.channel }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.workflowContext.priority }}"
            },
            {
              "name": "category",
              "value": "={{ $json.analysis.category }}"
            },
            {
              "name": "status",
              "value": "resolved"
            },
            {
              "name": "sentiment",
              "value": "={{ $json.analysis.sentiment }}"
            },
            {
              "name": "intent",
              "value": "={{ $json.analysis.intent }}"
            },
            {
              "name": "confidence",
              "value": "={{ $json.analysis.confidence }}"
            },
            {
              "name": "responseTime",
              "value": "={{ $json.responseTime }}"
            },
            {
              "name": "aiModel",
              "value": "claude-3-opus"
            },
            {
              "name": "customerVIP",
              "value": "={{ $json.customerData.vipStatus === 'VIP' }}"
            },
            {
              "name": "customerType",
              "value": "={{ $json.customerData.bookingHistory.length > 0 ? 'returning' : 'new' }}"
            },
            {
              "name": "escalationRequired",
              "value": "={{ $json.analysis.escalationRequired }}"
            },
            {
              "name": "satisfactionScore",
              "value": "={{ $json.analysis.sentiment === 'positive' ? 5 : $json.analysis.sentiment === 'neutral' ? 3 : 2 }}"
            },
            {
              "name": "timestamp",
              "value": "={{ $json.processingTimestamp }}"
            },
            {
              "name": "workflowId",
              "value": "={{ $workflow.id }}"
            },
            {
              "name": "executionId",
              "value": "={{ $execution.id }}"
            }
          ]
        }
      },
      "id": "Dashboard Real-time Update",
      "name": "Dashboard Real-time Update",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1600, 400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.analysis.escalationRequired }}",
              "value2": true
            }
          ]
        }
      },
      "id": "Escalation Required?",
      "name": "Escalation Required?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1200, 600]
    },
    {
      "parameters": {
        "fromEmail": "alerts@articshorex.com",
        "toEmail": "support-team@articshorex.com",
        "subject": "🚨 URGENT: Customer Support Escalation Required",
        "message": "=ESCALATION ALERT\n\nTicket ID: {{ $json.workflowContext.ticketId }}\nCustomer: {{ $json.customerData.name }} ({{ $json.customerData.email }})\nVIP Status: {{ $json.customerData.vipStatus }}\nPriority: {{ $json.workflowContext.priority }}\nChannel: {{ $json.workflowContext.channel }}\n\nOriginal Subject: {{ $json.workflowContext.originalSubject }}\nOriginal Message: {{ $json.workflowContext.originalMessage }}\n\nAI Analysis:\n- Intent: {{ $json.analysis.intent }}\n- Sentiment: {{ $json.analysis.sentiment }}\n- Confidence: {{ ($json.analysis.confidence * 100).toFixed(1) }}%\n- Category: {{ $json.analysis.category }}\n\nAI Response: {{ $json.response.message }}\n\nPlease review and provide human assistance immediately.\n\nDashboard: http://localhost:3000\nTicket Link: http://localhost:3000/ticket/{{ $json.workflowContext.ticketId }}"
      },
      "id": "Send Escalation Alert",
      "name": "Send Escalation Alert",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1400, 700],
      "credentials": {
        "smtp": {
          "id": "articshorex-smtp",
          "name": "ArticShorex SMTP"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Final Dashboard Metrics Update\nconst finalMetrics = {\n  ticketId: $('Response Processor').item.json.workflowContext.ticketId,\n  status: 'completed',\n  completedAt: new Date().toISOString(),\n  totalProcessingTime: $('Response Processor').item.json.responseTime,\n  escalated: $('Response Processor').item.json.analysis.escalationRequired,\n  customerSatisfactionPredicted: $('Response Processor').item.json.analysis.sentiment === 'positive' ? 5 : $('Response Processor').item.json.analysis.sentiment === 'neutral' ? 3 : 2,\n  aiPerformance: {\n    confidence: $('Response Processor').item.json.analysis.confidence,\n    intentAccuracy: $('Response Processor').item.json.analysis.confidence > 0.9 ? 'high' : 'medium',\n    sentimentAccuracy: $('Response Processor').item.json.analysis.confidence > 0.85 ? 'high' : 'medium',\n    responseQuality: $('Response Processor').item.json.analysis.confidence > 0.9 ? 'excellent' : 'good'\n  },\n  customerMetrics: {\n    vipCustomer: $('Response Processor').item.json.customerData.vipStatus === 'VIP',\n    loyaltyTier: $('Response Processor').item.json.customerData.loyaltyTier,\n    previousBookings: $('Response Processor').item.json.customerData.bookingHistory.length,\n    customerType: $('Response Processor').item.json.customerData.bookingHistory.length > 0 ? 'returning' : 'new'\n  },\n  workflowMetrics: {\n    workflowId: $workflow.id,\n    executionId: $execution.id,\n    nodeCount: $workflow.nodes.length,\n    successfulExecution: true,\n    errorCount: 0\n  }\n};\n\nreturn [{ json: finalMetrics }];"
      },
      "id": "Final Dashboard Metrics",
      "name": "Final Dashboard Metrics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1800, 400]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/webhook/completion-metrics",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "ticketId",
              "value": "={{ $json.ticketId }}"
            },
            {
              "name": "status",
              "value": "={{ $json.status }}"
            },
            {
              "name": "completedAt",
              "value": "={{ $json.completedAt }}"
            },
            {
              "name": "totalProcessingTime",
              "value": "={{ $json.totalProcessingTime }}"
            },
            {
              "name": "escalated",
              "value": "={{ $json.escalated }}"
            },
            {
              "name": "customerSatisfactionPredicted",
              "value": "={{ $json.customerSatisfactionPredicted }}"
            },
            {
              "name": "aiPerformance",
              "value": "={{ $json.aiPerformance }}"
            },
            {
              "name": "customerMetrics",
              "value": "={{ $json.customerMetrics }}"
            },
            {
              "name": "workflowMetrics",
              "value": "={{ $json.workflowMetrics }}"
            }
          ]
        }
      },
      "id": "Completion Metrics Webhook",
      "name": "Completion Metrics Webhook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2000, 400]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Merge Input Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Trigger (IMAP)": {
      "main": [
        [
          {
            "node": "Merge Input Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Input Data": {
      "main": [
        [
          {
            "node": "Dashboard Logger (Start)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dashboard Logger (Start)": {
      "main": [
        [
          {
            "node": "Customer Intelligence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Customer Intelligence": {
      "main": [
        [
          {
            "node": "AI Agent Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Processor": {
      "main": [
        [
          {
            "node": "Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Processor": {
      "main": [
        [
          {
            "node": "Create Support Ticket",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Email Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Dashboard Real-time Update",
            "type": "main",
            "index": 0
          },
          {
            "node": "Escalation Required?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dashboard Real-time Update": {
      "main": [
        [
          {
            "node": "Final Dashboard Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Escalation Required?": {
      "main": [
        [
          {
            "node": "Send Escalation Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Dashboard Metrics": {
      "main": [
        [
          {
            "node": "Completion Metrics Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "active": true
    }
  },
  "staticData": {},
  "tags": [
    {
      "createdAt": "2024-01-15T10:30:00.000Z",
      "updatedAt": "2024-01-15T10:30:00.000Z",
      "id": "ai-agent",
      "name": "AI Agent"
    },
    {
      "createdAt": "2024-01-15T10:30:00.000Z",
      "updatedAt": "2024-01-15T10:30:00.000Z",
      "id": "customer-support",
      "name": "Customer Support"
    },
    {
      "createdAt": "2024-01-15T10:30:00.000Z",
      "updatedAt": "2024-01-15T10:30:00.000Z",
      "id": "dashboard",
      "name": "Dashboard"
    },
    {
      "createdAt": "2024-01-15T10:30:00.000Z",
      "updatedAt": "2024-01-15T10:30:00.000Z",
      "id": "real-time",
      "name": "Real-time"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-01-15T10:30:00.000Z",
  "versionId": "dashboard-integrated-v2.0"
} 