version: "3.8"

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: autowais-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: autowais_password_2024
      MONGO_INITDB_DATABASE: autowais
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - autowais-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: autowais-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5001
      MONGODB_URI: mongodb://admin:autowais_password_2024@mongodb:27017/autowais?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-here
      FRONTEND_URL: https://yourdomain.com
    ports:
      - "5001:5001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - autowais-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./autowais
      dockerfile: Dockerfile.frontend
    container_name: autowais-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: https://yourdomain.com/api
      NEXT_PUBLIC_SITE_URL: https://yourdomain.com
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - autowais-network
    volumes:
      - ./logs:/app/logs

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: autowais-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-autowais.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - autowais-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: autowais-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - autowais-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PM2 Process Manager (Optional - for advanced process management)
  pm2:
    image: node:18-alpine
    container_name: autowais-pm2
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./ecosystem.config.js:/app/ecosystem.config.js:ro
      - ./logs:/app/logs
    networks:
      - autowais-network
    depends_on:
      - backend
      - frontend
    command: >
      sh -c "
        npm install -g pm2 &&
        pm2 start ecosystem.config.js &&
        pm2 logs
      "

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  autowais-network:
    driver: bridge
