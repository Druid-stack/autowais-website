{
  "name": "Customer Service Agent with AI",
  "nodes": [
    {
      "parameters": {
        "mailbox": "INBOX",
        "options": {},
        "downloadAttachments": false
      },
      "id": "IMAP Email",
      "name": "IMAP Email",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [200, 300],
      "credentials": {
        "imap": "YOUR_IMAP_CREDENTIAL_NAME"
      }
    },
    {
      "parameters": {
        "functionCode": "return [{\n  json: {\n    from: $json.from,\n    subject: $json.subject,\n    body: $json.text,\n    date: $json.date\n  }\n}];"
      },
      "id": "Parse Email",
      "name": "Parse Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "messages": [
          {
            "role": "system",
            "content": "You are a professional customer support agent for Nordic ShoreX.  
Your job is to process incoming customer emails and do the following:\n\n1. **Classify** the request as one of:  
   - Billing  
   - Technical Support  
   - Sales  
   - General Inquiry  
   - Other\n\n2. **Summarize** the customer's issue in 1-2 sentences.\n\n3. **Draft a polite, helpful reply** that:\n   - Directly addresses the customer's concern.\n   - Is clear, concise, and friendly.\n   - If the request is simple and you are confident, provide a complete answer.\n   - If the request is complex, unclear, or outside your knowledge, politely inform the customer that their request will be escalated to a human agent and do not attempt to answer in detail.\n\n4. **Escalation:**  
   - If you are not confident in your answer, or if the issue is complex, include the phrase:  
     `Escalate to human agent.`  
   - Otherwise, do not include this phrase.\n\n**Format your response as follows:**\n\n```\nClassification: [Billing/Technical Support/Sales/General Inquiry/Other]\nSummary: [Concise summary of the issue]\nReply: [Your drafted reply to the customer]\n```\n\n**Here is the customer email:**\n\nFrom: {{ $json.from }}  
Subject: {{ $json.subject }}  
Body: {{ $json.body }}\n\n---
\n\n**How to use:**  
- Paste the above prompt into the `text` or `prompt` field of your LangChain agent node.\n- The agent will output a structured response that can be parsed and used for further workflow automation.\n\nLet me know if you want the prompt further tailored for your brand voice or specific escalation rules!"
          },
          {
            "role": "user",
            "content": "From: {{$json[\"from\"]}}\nSubject: {{$json[\"subject\"]}}\nBody: {{$json[\"body\"]}}"
          }
        ]
      },
      "id": "AI Agent",
      "name": "AI Agent",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [600, 300],
      "credentials": {
        "openAiApi": "YOUR_OPENAI_CREDENTIAL_NAME"
      }
    },
    {
      "parameters": {
        "functionCode": "const aiResponse = $json.choices && $json.choices[0] && $json.choices[0].message && $json.choices[0].message.content ? $json.choices[0].message.content : '';\n\n// Simple extraction for demo: expects format like:\n// Classification: ...\n// Summary: ...\n// Reply: ...\n\nconst lines = aiResponse.split('\\n');\nlet ai_classification = '', ai_summary = '', ai_reply = '';\nlines.forEach(line => {\n  if (line.toLowerCase().startsWith('classification:')) ai_classification = line.split(':').slice(1).join(':').trim();\n  if (line.toLowerCase().startsWith('summary:')) ai_summary = line.split(':').slice(1).join(':').trim();\n  if (line.toLowerCase().startsWith('reply:')) ai_reply = line.split(':').slice(1).join(':').trim();\n});\n\nreturn [{\n  json: {\n    from: $json.from,\n    subject: $json.subject,\n    body: $json.body,\n    date: $json.date,\n    ai_classification,\n    ai_summary,\n    ai_reply\n  }\n}];"
      },
      "id": "Extract AI Output",
      "name": "Extract AI Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "support_tickets",
        "fields": "from,subject,body,date,ai_classification,ai_summary,ai_reply",
        "options": {}
      },
      "id": "Log to MongoDB",
      "name": "Log to MongoDB",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [1000, 300],
      "credentials": {
        "mongoDb": "YOUR_MONGODB_CREDENTIAL_NAME"
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.ai_reply }}",
              "operation": "notContains",
              "value2": "Escalate to human agent"
            }
          ]
        }
      },
      "id": "If Agent Confident",
      "name": "If Agent Confident",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "fromEmail": "support@nordicshorex.com",
        "toEmail": "={{ $json.from }}",
        "subject": "Re: {{ $json.subject }}",
        "text": "={{ $json.ai_reply }}",
        "options": {}
      },
      "id": "Send Auto-Reply",
      "name": "Send Auto-Reply",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [1400, 200],
      "credentials": {
        "smtp": "YOUR_SMTP_CREDENTIAL_NAME"
      }
    },
    {
      "parameters": {
        "fromEmail": "support@nordicshorex.com",
        "toEmail": "human.agent@nordicshorex.com",
        "subject": "Escalation Needed: {{ $json.subject }}",
        "text": "A customer request could not be handled automatically. Please review:\n\nFrom: {{ $json.from }}\nSubject: {{ $json.subject }}\nBody: {{ $json.body }}\n\nAI Suggestion: {{ $json.ai_reply }}",
        "options": {}
      },
      "id": "Escalate to Human",
      "name": "Escalate to Human",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [1400, 400],
      "credentials": {
        "smtp": "YOUR_SMTP_CREDENTIAL_NAME"
      }
    }
  ],
  "connections": {
    "IMAP Email": {
      "main": [
        [
          {
            "node": "Parse Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Email": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Extract AI Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract AI Output": {
      "main": [
        [
          {
            "node": "Log to MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to MongoDB": {
      "main": [
        [
          {
            "node": "If Agent Confident",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Agent Confident": {
      "main": [
        [
          {
            "node": "Send Auto-Reply",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Escalate to Human",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  }
} 