{
  "name": "Multi-Channel Customer Service Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "customer-service",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "8c5c2d68-1a3d-4f27-9d8b-bb1ccffda94d",
      "name": "Main Webhook Entry",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-1920, 1540],
      "webhookId": "customer-service-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Multi-channel input processor\nconst body = $input.first().json.body || $input.first().json;\nconst headers = $input.first().json.headers || {};\n\n// Determine channel type from webhook path or headers\nlet channelType = 'email'; // default\nlet messageData = {};\n\nif (headers['x-whatsapp-webhook']) {\n  channelType = 'whatsapp';\n  messageData = {\n    from: body.from,\n    message: body.text?.body || body.interactive?.button_reply?.title,\n    messageId: body.id,\n    timestamp: body.timestamp,\n    phoneNumber: body.from,\n    messageType: body.type || 'text'\n  };\n} else if (headers['x-telegram-bot-api']) {\n  channelType = 'telegram';\n  messageData = {\n    from: body.message.from.username,\n    message: body.message.text,\n    messageId: body.message.message_id,\n    timestamp: body.message.date,\n    chatId: body.message.chat.id,\n    messageType: 'text'\n  };\n} else if (headers['x-slack-signature']) {\n  channelType = 'slack';\n  messageData = {\n    from: body.event.user,\n    message: body.event.text,\n    messageId: body.event.ts,\n    timestamp: body.event.ts,\n    channel: body.event.channel,\n    messageType: 'text'\n  };\n} else if (body.email || body.from) {\n  channelType = 'email';\n  messageData = {\n    from: body.email?.from || body.from,\n    message: body.email?.body || body.text || body.body,\n    messageId: body.email?.messageId || `email_${Date.now()}`,\n    timestamp: new Date().toISOString(),\n    subject: body.email?.subject || body.subject,\n    messageType: 'email'\n  };\n}\n\nreturn {\n  channelType,\n  messageData,\n  originalPayload: body,\n  headers: headers\n};"
      },
      "id": "0e26b003-3669-4b93-91ae-25f9e647f65d",
      "name": "Channel Input Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1380, 1280]
    },
    {
      "parameters": {
        "operation": "findOneAndUpdate",
        "collection": "conversations",
        "updateKey": "_id",
        "fields": "conversationId,channelType,userId,lastMessage,lastTimestamp,messageCount",
        "upsert": true,
        "options": {}
      },
      "id": "b3588c74-e7ec-4c03-af4b-126e09a54de6",
      "name": "Conversation Tracker",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [-720, 1520],
      "credentials": {
        "mongoDb": "YOUR_MONGODB_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "text": "={{ $json.messageData.message }}",
        "options": {
          "systemMessage": "You are NordicShoreX's AI customer service agent. You help customers with:\n\n1. Product information and recommendations\n2. Order status and tracking\n3. Technical support and troubleshooting\n4. Billing and account questions\n5. Returns and exchanges\n\nCompany Context:\n- NordicShoreX is a premium outdoor gear company\n- We specialize in cold-weather equipment and Nordic outdoor activities\n- Our products include winter jackets, thermal gear, ski equipment, and outdoor accessories\n- We prioritize quality, durability, and customer satisfaction\n\nGuidelines:\n- Be helpful, professional, and empathetic\n- Provide accurate information about products and policies\n- If you need to access specific order information, ask for order number\n- For complex technical issues, offer to escalate to human support\n- Keep responses concise but informative\n- Maintain conversation context across messages\n\nCurrent conversation context: {{ $('Conversation Tracker').first().json }}\n\nRespond to the customer's message appropriately."
        }
      },
      "id": "5b355044-cc74-4cbb-bcef-a856b7761030",
      "name": "AI Customer Service Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [-600, 1020]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "messages": [
          {
            "role": "system",
            "content": "Analyze the customer message and provide intent classification, sentiment analysis, and urgency level. Return JSON format:\n{\n  \"intent\": \"billing|technical_support|sales|product_info|order_status|returns|general\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"urgency\": \"low|medium|high\",\n  \"requiredActions\": \"none|human_escalation|order_lookup|product_recommendation\",\n  \"confidence\": 0.85\n}"
          },
          {
            "role": "user",
            "content": "={{ $json.messageData.message }}"
          }
        ],
        "options": {
          "maxTokens": 200,
          "temperature": 0.2
        }
      },
      "id": "3918d551-dde2-4745-b673-c3c1016d2d02",
      "name": "Intent & Sentiment Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [-220, 1040],
      "credentials": {
        "openAiApi": "YOUR_OPENAI_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "jsCode": "// Process AI analysis and prepare response routing\nconst aiResponse = $('AI Customer Service Agent').first().json.output;\nconst analysisStr = $('Intent & Sentiment Analysis').first().json.choices[0].message.content;\nlet analysis;\n\ntry {\n  analysis = JSON.parse(analysisStr);\n} catch (e) {\n  analysis = {\n    intent: 'general',\n    sentiment: 'neutral',\n    urgency: 'medium',\n    requiredActions: 'none',\n    confidence: 0.5\n  };\n}\n\nconst messageData = $('Channel Input Processor').first().json.messageData;\nconst channelType = $('Channel Input Processor').first().json.channelType;\n\n// Generate interaction record\nconst interactionRecord = {\n  interactionId: `int_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  conversationId: `${messageData.from}_${channelType}`,\n  channel: channelType,\n  userId: messageData.from,\n  userMessage: messageData.message,\n  aiResponse: aiResponse,\n  intent: analysis.intent,\n  sentiment: analysis.sentiment,\n  urgency: analysis.urgency,\n  requiredActions: analysis.requiredActions,\n  timestamp: new Date().toISOString(),\n  resolved: analysis.requiredActions === 'none'\n};\n\n// Determine if human escalation is needed\nconst needsEscalation = (\n  analysis.urgency === 'high' || \n  analysis.sentiment === 'negative' || \n  analysis.requiredActions === 'human_escalation' ||\n  aiResponse.toLowerCase().includes('escalate') ||\n  aiResponse.toLowerCase().includes('human agent')\n);\n\n// Prepare response for specific channel\nlet channelResponse = {\n  message: aiResponse,\n  recipient: messageData.from,\n  channel: channelType\n};\n\n// Channel-specific formatting\nif (channelType === 'whatsapp') {\n  channelResponse.whatsappData = {\n    to: messageData.phoneNumber,\n    type: 'text',\n    text: { body: aiResponse }\n  };\n} else if (channelType === 'telegram') {\n  channelResponse.telegramData = {\n    chat_id: messageData.chatId,\n    text: aiResponse,\n    parse_mode: 'Markdown'\n  };\n} else if (channelType === 'slack') {\n  channelResponse.slackData = {\n    channel: messageData.channel,\n    text: aiResponse,\n    thread_ts: messageData.messageId\n  };\n} else if (channelType === 'email') {\n  channelResponse.emailData = {\n    to: messageData.from,\n    subject: `Re: ${messageData.subject}`,\n    html: `<p>${aiResponse.replace(/\\n/g, '</p><p>')}</p>`\n  };\n}\n\nreturn {\n  interactionRecord,\n  needsEscalation,\n  channelResponse,\n  analysis\n};"
      },
      "id": "29063c0e-268b-4751-af43-2aa63666e498",
      "name": "Response Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [0, 1320]
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "interactions",
        "fields": "interactionId,conversationId,channel,userId,userMessage,aiResponse,intent,sentiment,urgency,requiredActions,timestamp,resolved",
        "options": {}
      },
      "id": "441b9ab3-f4dd-483d-8552-a3955a99bd7f",
      "name": "Log Interaction",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [220, 1320],
      "credentials": {
        "mongoDb": "YOUR_MONGODB_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "escalation-condition",
              "leftValue": "={{ $json.needsEscalation }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0018793a-73c6-457d-b8d7-38be4873b60b",
      "name": "Needs Escalation?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [440, 1320]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C123456789",
          "mode": "name",
          "cachedResultName": "support-alerts"
        },
        "text": "ðŸš¨ **Customer Service Escalation Required**\n\n**Channel:** {{ $('Response Processor').first().json.channelResponse.channel }}\n**Customer:** {{ $('Response Processor').first().json.channelResponse.recipient }}\n**Intent:** {{ $('Response Processor').first().json.analysis.intent }}\n**Sentiment:** {{ $('Response Processor').first().json.analysis.sentiment }}\n**Urgency:** {{ $('Response Processor').first().json.analysis.urgency }}\n\n**Original Message:**\n{{ $('Channel Input Processor').first().json.messageData.message }}\n\n**AI Response:**\n{{ $('AI Customer Service Agent').first().json.output }}\n\n**Interaction ID:** {{ $('Response Processor').first().json.interactionRecord.interactionId }}",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "18352f94-9d91-4cd1-8a75-64c1f4f1a4f8",
      "name": "Slack Escalation Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [660, 1220],
      "credentials": {
        "slackOAuth2Api": "YOUR_SLACK_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "whatsapp-condition",
              "leftValue": "={{ $json.channelResponse.channel }}",
              "rightValue": "whatsapp",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "058a413d-b3a1-4bab-8c8a-549c5e6929f1",
      "name": "Response Channel Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [440, 1520]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/YOUR_PHONE_NUMBER_ID/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "whatsAppApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "messaging_product",
              "value": "whatsapp"
            },
            {
              "name": "to",
              "value": "={{ $json.channelResponse.whatsappData.to }}"
            },
            {
              "name": "type",
              "value": "text"
            },
            {
              "name": "text",
              "value": "={{ $json.channelResponse.whatsappData.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d8ccd186-6c08-4c66-99fb-10cd2eeef0b3",
      "name": "WhatsApp Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [660, 1380],
      "credentials": {
        "whatsAppApi": "YOUR_WHATSAPP_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "fromEmail": "support@nordicshorex.com",
        "toEmail": "={{ $json.channelResponse.emailData.to }}",
        "subject": "={{ $json.channelResponse.emailData.subject }}",
        "html": "={{ $json.channelResponse.emailData.html }}",
        "options": {}
      },
      "id": "b3fe1da6-d86c-4983-a4a3-cf159a557d4b",
      "name": "Email Response",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [700, 1760],
      "credentials": {
        "smtp": "YOUR_SMTP_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"interactionId\": $('Response Processor').first().json.interactionRecord.interactionId,\n  \"message\": \"Response sent successfully\",\n  \"channel\": $json.channelResponse.channel,\n  \"escalated\": $('Response Processor').first().json.needsEscalation\n} }}",
        "options": {}
      },
      "id": "f5cd98bf-dd3d-40b1-9876-7613f58c678e",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [880, 1520]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "856a41a4-7731-47a9-9b67-8fd8c3490ff4",
      "name": "IMAP Email",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [-1720, 1100],
      "credentials": {
        "imap": "YOUR_IMAP_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "jsCode": "// Transform IMAP email to standard format\nconst email = $input.first().json;\n\nreturn {\n  body: {\n    email: {\n      from: email.from,\n      subject: email.subject,\n      body: email.text || email.html,\n      messageId: email.messageId || `email_${Date.now()}`\n    }\n  },\n  headers: {\n    'x-email-trigger': 'true'\n  }\n};"
      },
      "id": "email-transformer",
      "name": "Email Transformer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1560, 1100]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "maxTokens": 500,
          "temperature": 0.7
        }
      },
      "id": "openai-model",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [-400, 900],
      "credentials": {
        "openAiApi": "YOUR_OPENAI_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare conversation tracking data\nconst messageData = $input.first().json.messageData;\nconst channelType = $input.first().json.channelType;\n\nconst conversationId = `${messageData.from}_${channelType}`;\n\nreturn {\n  conversationId: conversationId,\n  channelType: channelType,\n  userId: messageData.from,\n  lastMessage: messageData.message,\n  lastTimestamp: new Date().toISOString(),\n  messageCount: 1\n};"
      },
      "id": "conversation-prep",
      "name": "Conversation Prep",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-900, 1280]
    }
  ],
  "connections": {
    "Main Webhook Entry": {
      "main": [
        [
          {
            "node": "Channel Input Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Channel Input Processor": {
      "main": [
        [
          {
            "node": "Conversation Prep",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Prep": {
      "main": [
        [
          {
            "node": "Conversation Tracker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Tracker": {
      "main": [
        [
          {
            "node": "AI Customer Service Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Customer Service Agent": {
      "main": [
        [
          {
            "node": "Intent & Sentiment Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intent & Sentiment Analysis": {
      "main": [
        [
          {
            "node": "Response Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Processor": {
      "main": [
        [
          {
            "node": "Log Interaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Interaction": {
      "main": [
        [
          {
            "node": "Needs Escalation?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Escalation?": {
      "main": [
        [
          {
            "node": "Slack Escalation Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response Channel Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Escalation Alert": {
      "main": [
        [
          {
            "node": "Response Channel Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Channel Router": {
      "main": [
        [
          {
            "node": "WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Email Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IMAP Email": {
      "main": [
        [
          {
            "node": "Email Transformer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Transformer": {
      "main": [
        [
          {
            "node": "Channel Input Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Customer Service Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8ad37ad15c2267fb4006da6aef8d73c0f26f2c0f030db68fa538cab094fdf776"
  }
} 