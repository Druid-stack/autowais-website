{
  "name": "Multi-Channel Customer Service Agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "customer-service",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "8c5c2d68-1a3d-4f27-9d8b-bb1ccffda94d",
      "name": "Main Webhook Entry",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-1920, 1540],
      "webhookId": "customer-service-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Multi-channel input processor\nconst body = $input.first().json.body || $input.first().json;\nconst headers = $input.first().json.headers || {};\n\nlet channelType = 'email';\nlet messageData = {};\n\nif (headers['x-whatsapp-webhook']) {\n  channelType = 'whatsapp';\n  messageData = {\n    from: body.from,\n    message: body.text?.body || body.interactive?.button_reply?.title,\n    messageId: body.id,\n    timestamp: body.timestamp,\n    phoneNumber: body.from,\n    messageType: body.type || 'text'\n  };\n} else if (headers['x-telegram-bot-api']) {\n  channelType = 'telegram';\n  messageData = {\n    from: body.message.from.username,\n    message: body.message.text,\n    messageId: body.message.message_id,\n    timestamp: body.message.date,\n    chatId: body.message.chat.id,\n    messageType: 'text'\n  };\n} else if (headers['x-slack-signature']) {\n  channelType = 'slack';\n  messageData = {\n    from: body.event.user,\n    message: body.event.text,\n    messageId: body.event.ts,\n    timestamp: body.event.ts,\n    channel: body.event.channel,\n    messageType: 'text'\n  };\n} else if (body.email || body.from) {\n  channelType = 'email';\n  messageData = {\n    from: body.email?.from || body.from,\n    message: body.email?.body || body.text || body.body,\n    messageId: body.email?.messageId || `email_${Date.now()}` ,\n    timestamp: new Date().toISOString(),\n    subject: body.email?.subject || body.subject,\n    messageType: 'email'\n  };\n}\n\n// Try to extract bookingReference, email, or name from the message\nlet bookingReference = null;\nlet email = messageData.from;\nlet name = null;\n\nconst refMatch = messageData.message && messageData.message.match(/\b[A-Z0-9]{6,}\b/);\nif (refMatch) bookingReference = refMatch[0];\n\nreturn {\n  channelType,\n  messageData,\n  bookingReference,\n  email,\n  name,\n  originalPayload: body,\n  headers: headers\n};"
      },
      "id": "0e26b003-3669-4b93-91ae-25f9e647f65d",
      "name": "Channel Input Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1380, 1280]
    },
    {
      "parameters": {
        "operation": "findOne",
        "collection": "bookings",
        "query": "{ \"$or\": [ { \"bookingReference\": \"={{ $json.bookingReference }}\" }, { \"email\": \"={{ $json.email }}\" }, { \"name\": \"={{ $json.name }}\" } ] }"
      },
      "id": "booking-lookup",
      "name": "Booking Lookup",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [-1000, 1200],
      "credentials": {
        "mongoDb": "nordicshorex-mongodb"
      }
    },
    {
      "parameters": {
        "operation": "findOneAndUpdate",
        "collection": "conversations",
        "updateKey": "_id",
        "fields": "conversationId,channelType,userId,lastMessage,lastTimestamp,messageCount",
        "upsert": true,
        "options": {}
      },
      "id": "b3588c74-e7ec-4c03-af4b-126e09a54de6",
      "name": "Conversation Tracker",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [-720, 1520],
      "credentials": {
        "mongoDb": "nordicshorex-mongodb"
      }
    },
    {
      "parameters": {
        "text": "={{ $json.messageData.message }}",
        "options": {
          "systemMessage": "You are a professional customer support agent for NordicShoreX, a travel agency specializing in Nordic tours and experiences.\n\nYour job is to assist customers who have already booked tours. You have access to a MongoDB database with all booking details.\n\nYou help with:\n- Itinerary questions and changes\n- Cancellations and refunds\n- Payment and billing issues\n- Special requests (dietary, accessibility, etc.)\n- Emergency support (missed connections, lost documents, etc.)\n- Providing travel tips and destination information\n\nGuidelines:\n- Always verify the customerâ€™s booking using their name, email, or booking reference.\n- Be friendly, knowledgeable, and empathetic.\n- For urgent or complex issues, offer to escalate to a human travel expert.\n- If you need to look up or update booking details, use the MongoDB database.\n- Confirm all changes with the customer before finalizing.\n- Maintain a helpful and reassuring tone, especially for travel emergencies.\n\nCurrent booking data: {{ $('booking-lookup').first().json }}\nCurrent conversation context: {{ $('Conversation Tracker').first().json }}\n\nRespond to the customer's message appropriately."
        }
      },
      "id": "5b355044-cc74-4cbb-bcef-a856b7761030",
      "name": "AI Customer Service Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [-600, 1020]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "messages": [
          {
            "role": "system",
            "content": "Analyze the customer message and provide intent classification, sentiment analysis, and urgency level. Return JSON format:\n{\n  \"intent\": \"billing|technical_support|sales|product_info|order_status|returns|general\",\n  \"sentiment\": \"positive|neutral|negative\",\n  \"urgency\": \"low|medium|high\",\n  \"requiredActions\": \"none|human_escalation|order_lookup|product_recommendation\",\n  \"confidence\": 0.85\n}"
          },
          {
            "role": "user",
            "content": "={{ $json.messageData.message }}"
          }
        ],
        "options": {
          "maxTokens": 200,
          "temperature": 0.2
        }
      },
      "id": "3918d551-dde2-4745-b673-c3c1016d2d02",
      "name": "Intent & Sentiment Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [-220, 1040],
      "credentials": {
        "openAiApi": "YOUR_OPENAI_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "jsCode": "// Process AI analysis and prepare response routing\nconst aiResponse = $('AI Customer Service Agent').first().json.output;\nconst analysisStr = $('Intent & Sentiment Analysis').first().json.choices[0].message.content;\nlet analysis;\n\ntry {\n  analysis = JSON.parse(analysisStr);\n} catch (e) {\n  analysis = {\n    intent: 'general',\n    sentiment: 'neutral',\n    urgency: 'medium',\n    requiredActions: 'none',\n    confidence: 0.5\n  };\n}\n\nconst messageData = $('Channel Input Processor').first().json.messageData;\nconst channelType = $('Channel Input Processor').first().json.channelType;\n\n// Generate interaction record\nconst interactionRecord = {\n  interactionId: `int_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` ,\n  conversationId: `${messageData.from}_${channelType}` ,\n  channel: channelType,\n  userId: messageData.from,\n  userMessage: messageData.message,\n  aiResponse: aiResponse,\n  intent: analysis.intent,\n  sentiment: analysis.sentiment,\n  urgency: analysis.urgency,\n  requiredActions: analysis.requiredActions,\n  timestamp: new Date().toISOString(),\n  resolved: analysis.requiredActions === 'none'\n};\n\n// Determine if human escalation is needed\nconst needsEscalation = (\n  analysis.urgency === 'high' || \n  analysis.sentiment === 'negative' || \n  analysis.requiredActions === 'human_escalation' ||\n  aiResponse.toLowerCase().includes('escalate') ||\n  aiResponse.toLowerCase().includes('human agent')\n);\n\n// Prepare response for specific channel\nlet channelResponse = {\n  message: aiResponse,\n  recipient: messageData.from,\n  channel: channelType\n};\n\n// Channel-specific formatting\nif (channelType === 'whatsapp') {\n  channelResponse.whatsappData = {\n    to: messageData.phoneNumber,\n    type: 'text',\n    text: { body: aiResponse }\n  };\n} else if (channelType === 'telegram') {\n  channelResponse.telegramData = {\n    chat_id: messageData.chatId,\n    text: aiResponse,\n    parse_mode: 'Markdown'\n  };\n} else if (channelType === 'slack') {\n  channelResponse.slackData = {\n    channel: messageData.channel,\n    text: aiResponse,\n    thread_ts: messageData.messageId\n  };\n} else if (channelType === 'email') {\n  channelResponse.emailData = {\n    to: messageData.from,\n    subject: `Re: ${messageData.subject}` ,\n    html: `<p>${aiResponse.replace(/\\n/g, '</p><p>')}</p>`\n  };\n}\n\nreturn {\n  interactionRecord,\n  needsEscalation,\n  channelResponse,\n  analysis\n};"
      },
      "id": "29063c0e-268b-4751-af43-2aa63666e498",
      "name": "Response Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [0, 1320]
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "interactions",
        "fields": "interactionId,conversationId,channel,userId,userMessage,aiResponse,intent,sentiment,urgency,requiredActions,timestamp,resolved",
        "options": {}
      },
      "id": "441b9ab3-f4dd-483d-8552-a3955a99bd7f",
      "name": "Log Interaction",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [220, 1320],
      "credentials": {
        "mongoDb": "nordicshorex-mongodb"
      }
    }
  ],
  "connections": {
    "Main Webhook Entry": {
      "main": [
        [
          {
            "node": "Channel Input Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Channel Input Processor": {
      "main": [
        [
          {
            "node": "booking-lookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "booking-lookup": {
      "main": [
        [
          {
            "node": "Conversation Tracker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Tracker": {
      "main": [
        [
          {
            "node": "AI Customer Service Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8ad37ad15c2267fb4006da6aef8d73c0f26f2c0f030db68fa538cab094fdf776"
  }
} 