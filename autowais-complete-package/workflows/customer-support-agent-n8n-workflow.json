{
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "96016257-9232-4066-9a87-7e1efd02f42b",
      "name": "IMAP Email",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 1,
      "position": [ -360, 860 ],
      "credentials": {}
    },
    {
      "parameters": {
        "functionCode": "return [{\n  json: {\n    from: $json.from,\n    subject: $json.subject,\n    body: $json.text,\n    date: $json.date\n  }\n}];"
      },
      "id": "895ea807-11aa-4cb0-bece-99bb21d6a355",
      "name": "Parse Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [ -120, 760 ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [ 120, 1020 ],
      "id": "fc142352-5022-4a6e-9f36-6dd1939aaf25",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "functionCode": "const aiResponse = $json.choices && $json.choices[0] && $json.choices[0].message && $json.choices[0].message.content ? $json.choices[0].message.content : '';\n\n// Simple extraction for demo: expects format like:\n// Classification: ...\n// Summary: ...\n// Reply: ...\n\nconst lines = aiResponse.split('\\n');\nlet ai_classification = '', ai_summary = '', ai_reply = '';\nlines.forEach(line => {\n  if (line.toLowerCase().startsWith('classification:')) ai_classification = line.split(':').slice(1).join(':').trim();\n  if (line.toLowerCase().startsWith('summary:')) ai_summary = line.split(':').slice(1).join(':').trim();\n  if (line.toLowerCase().startsWith('reply:')) ai_reply = line.split(':').slice(1).join(':').trim();\n});\n\nreturn [{\n  json: {\n    from: $json.from,\n    subject: $json.subject,\n    body: $json.body,\n    date: $json.date,\n    ai_classification,\n    ai_summary,\n    ai_reply\n  }\n}];"
      },
      "id": "5a1f9f07-2e74-4d3f-a5a0-ef0cf4285439",
      "name": "Extract AI Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [ 380, 1080 ]
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "support_tickets",
        "fields": "from,subject,body,date,ai_classification,ai_summary,ai_reply",
        "options": {}
      },
      "id": "21c41dad-e9de-49f1-9bf3-f62b57ac5073",
      "name": "Log to MongoDB",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [ 580, 1080 ],
      "credentials": {}
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.ai_reply }}",
              "operation": "notContains",
              "value2": "Escalate to human agent"
            }
          ]
        }
      },
      "id": "55e41d55-a686-4f99-9c28-1fd2971e7c08",
      "name": "If Agent Confident",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [ 780, 1080 ]
    },
    {
      "parameters": {
        "fromEmail": "support@nordicshorex.com",
        "toEmail": "={{ $json.from }}",
        "subject": "Re: {{ $json.subject }}",
        "text": "={{ $json.ai_reply }}",
        "options": {}
      },
      "id": "b8e9a41a-c3e7-4286-b401-282abe3aa09b",
      "name": "Send Auto-Reply1",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [ 980, 980 ],
      "credentials": {}
    },
    {
      "parameters": {
        "fromEmail": "support@nordicshorex.com",
        "toEmail": "human.agent@nordicshorex.com",
        "subject": "Escalation Needed: {{ $json.subject }}",
        "text": "A customer request could not be handled automatically. Please review:\n\nFrom: {{ $json.from }}\nSubject: {{ $json.subject }}\nBody: {{ $json.body }}\n\nAI Suggestion: {{ $json.ai_reply }}",
        "options": {}
      },
      "id": "dea84729-bbfc-454b-9fe0-6801a2a41b91",
      "name": "Escalate to Human",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [ 980, 1260 ],
      "credentials": {}
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [ 60, 1340 ],
      "id": "284fda89-eeed-43bf-87a2-2adda93e5b75",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "CYDIW7Fux1hiuQGq",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "path": "137529ea-bb76-459e-93ad-edcf4b15e819",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [ -380, 1180 ],
      "id": "d84b6c2a-5875-4c18-80e5-809e857bd4b1",
      "name": "Webhook",
      "webhookId": "137529ea-bb76-459e-93ad-edcf4b15e819"
    }
  ],
  "connections": {
    "IMAP Email": {
      "main": [
        [
          {
            "node": "Parse Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Email": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract AI Output": {
      "main": [
        [
          {
            "node": "Log to MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to MongoDB": {
      "main": [
        [
          {
            "node": "If Agent Confident",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Agent Confident": {
      "main": [
        [
          {
            "node": "Send Auto-Reply1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Extract AI Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8ad37ad15c2267fb4006da6aef8d73c0f26f2c0f030db68fa538cab094fdf776"
  }
} 